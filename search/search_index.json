{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kopy","text":"<p>kopy is a kubernetes operator that can sync ConfigMap or secret objects to other namespaces within the cluster.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The kopy operator runs a deployment on the kubernetes cluster.  It watches for ConfigMap or secrets objects that contain annotations with the sync key <code>kopy.kot-labs.com/sync</code>.</p> ConfigMap/secret object annotations<pre><code>metadata:\n    annotations:\n      kopy.kot-labs.com/sync: app=test-config-00\n</code></pre> <p>It will take the annotation values and look for any namespaces that are labeled with it and sync the objects into that namespace.</p> namespace with sync label<pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: test-target-config-ns-00\n  labels:\n      app: test-config-00\n</code></pre>"},{"location":"#installing-with-helm","title":"Installing with Helm","text":"<p>Add the helm chart repository <pre><code>helm repo add kopy https://kopy.kot-labs.com\n\nhelm repo update kopy\n</code></pre></p> <p>Install helm chart with defaults into the <code>kopy</code> namespace <pre><code>helm install kopy kopy/kopy \\\n--create-namespace \\\n--namespace=kopy\n</code></pre></p> <p>Install helm chart into <code>kopy</code> namespace with overriding values <pre><code>helm upgrade kopy kopy/kopy \\\n--create-namespace \\\n--namespace=kopy \\\n--set controllerManager.container.resources.limits.memory=256Mi\n</code></pre></p>"},{"location":"user-guide/","title":"User Guide","text":"<p>The kopy operator runs a deployment on the kubernetes cluster.  It watches for ConfigMap or secrets objects that contain annotations with the sync key <code>flynshue.io/sync</code>.</p>"},{"location":"user-guide/#sync-configmaps","title":"Sync ConfigMaps","text":"<p>Create a ConfigMap and add annotation with sync key <code>flynshue.io/sync</code></p> example-configmap.yaml<pre><code>apiVersion: v1\ndata:\n  URL: https://example.kopy.io\nkind: ConfigMap\nmetadata:\n  name: example-configmap\n  annotations:\n    flynshue.io/sync: \"app=foobar\"\n</code></pre> <p>Create a new namespace with labels that match value of the <code>flynshue.io/sync</code> key annotations example-target-ns.yaml<pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: example-target\n  labels:\n    app: foobar\n</code></pre></p> <p>Once the namespace has the labels, kopy will sync the ConfigMap over <pre><code>$ kubectl -n example-target get cm\nNAME                DATA   AGE\nexample-ConfigMap   1      68s\nkube-root-ca.crt    1      96s\n</code></pre></p> <p>Here's what the copy ConfigMap will look like <pre><code>$ kubectl -n example-target get cm example-configmap -o yaml\napiVersion: v1\ndata:\n  URL: https://example.kopy.io\nkind: ConfigMap\nmetadata:\n  creationTimestamp: \"2025-01-26T18:25:22Z\"\n  finalizers:\n  - flynshue.io/finalizer\n  labels:\n    flynshue.io/origin.namespace: demo\n  name: example-configmap\n  namespace: example-target\n  resourceVersion: \"1088\"\n  uid: c8d16c64-1c20-47ae-9dc6-c3cdb2d3e701\n</code></pre></p> <p>Here's what it looks like in the kopy operator logs <pre><code>$ kubectl -n kopy logs -f kopy-controller-manager-c5c5c88cb-zqtwg\n2025-01-26T18:24:14Z    INFO    source object   {\"controller\": \"configmap\", \"controllerGroup\": \"\", \"controllerKind\": \"ConfigMap\", \"ConfigMap\": {\"name\":\"example-configmap\",\"namespace\":\"demo\"}, \"namespace\": \"demo\", \"name\": \"example-configmap\", \"reconcileID\": \"a476e927-8612-4882-8962-e61652314fcc\"}\n2025-01-26T18:25:22Z    INFO    need to add reconile    {\"source.configMap\": \"example-configmap\", \"source.Namespace\": \"demo\", \"target.Namespace\": \"example-target\"}\n2025-01-26T18:25:22Z    INFO    source object   {\"controller\": \"configmap\", \"controllerGroup\": \"\", \"controllerKind\": \"ConfigMap\", \"ConfigMap\": {\"name\":\"example-configmap\",\"namespace\":\"demo\"}, \"namespace\": \"demo\", \"name\": \"example-configmap\", \"reconcileID\": \"ee618d24-60e3-44f2-a8b1-c4a2836aa2c5\"}\n2025-01-26T18:25:22Z    INFO    successfully synced {\"controller\": \"configmap\", \"controllerGroup\": \"\", \"controllerKind\": \"ConfigMap\", \"ConfigMap\": {\"name\":\"example-configmap\",\"namespace\":\"demo\"}, \"namespace\": \"demo\", \"name\": \"example-configmap\", \"reconcileID\": \"ee618d24-60e3-44f2-a8b1-c4a2836aa2c5\", \"target.Namespace\": \"example-target\"}\n</code></pre></p>"},{"location":"user-guide/#sync-secrets","title":"Sync Secrets","text":"<p>Syncing Secrets is similar to the ConfigMap process.  You just need to add annotation with the sync key to the Secret.</p> <p>Create a Secret and add annotation with sync key <code>flynshue.io/sync</code></p> fake-secret.yaml<pre><code>apiVersion: v1\ndata:\n  key1: c3VwZXJzZWNyZXQ=\nkind: Secret\nmetadata:\n  creationTimestamp: null\n  name: fake-secret\n  namespace: fake-secret-ns\n  annotations:\n    flynshue.io/sync: \"app=fakesecret\"\n</code></pre> <p>Create a new namespace with labels that match value of the <code>flynshue.io/sync</code> key annotations another-namespace.yaml<pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  creationTimestamp: null\n  name: another-namespace\n  labels:\n    app: fakesecret\n</code></pre></p> <p>Once the namespace has the labels, kopy will sync the ConfigMap over <pre><code>$ kubectl -n another-namespace get secrets\nNAME          TYPE     DATA   AGE\nfake-secret   Opaque   1      57s\n</code></pre></p> <p>Here's what the secret looks like. <pre><code>$ kubectl -n another-namespace get secrets -o yaml\napiVersion: v1\nitems:\n- apiVersion: v1\n  data:\n    key1: c3VwZXJzZWNyZXQ=\n  kind: Secret\n  metadata:\n    creationTimestamp: \"2025-01-27T15:38:20Z\"\n    finalizers:\n    - flynshue.io/finalizer\n    labels:\n      flynshue.io/origin.namespace: fake-secret-ns\n    name: fake-secret\n    namespace: another-namespace\n    resourceVersion: \"1048\"\n    uid: 7d035a18-7f50-4713-8166-c8d4fe32833d\n  type: Opaque\nkind: List\nmetadata:\n  resourceVersion: \"\"\n</code></pre></p>"},{"location":"user-guide/#tips","title":"Tips","text":""},{"location":"user-guide/#deleting-a-source-configmapsecret","title":"Deleting a source ConfigMap/Secret","text":"<p>When you delete a ConfigMap/Secret object that contains an annotation with sync key <code>flynshue.io/sync</code>, the kopy operator will remove the finalizer from any copies of the object so that the copies of that object remain in their namespaces.</p> <p>This allows applications that are using copies of the object to continue to operate without disruption in the event that the source object was deleted by accident.</p>"},{"location":"user-guide/#deleting-a-copy-object","title":"Deleting a copy object","text":"<p>When you delete a ConfigMap/Secret object that resides in a namespace that contains a label that matches a source ConfigMap/Secret object, the kopy operator will re-sync the object back into the namespace.  In order to delete a copy of that object, you'll have to remove the label from the namespace and then remove the finalizer from the object copy.</p> <p>Remove label from namespace another-namespace.yaml<pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  creationTimestamp: null\n  name: another-namespace\n  labels:\n    app: fakesecret # remove this\n</code></pre></p> <p>Remove finalizer <pre><code>apiVersion: v1\ndata:\n  key1: c3VwZXJzZWNyZXQ=\nkind: Secret\nmetadata:\n  creationTimestamp: \"2025-01-27T15:38:20Z\"\n  finalizers: # remove this\n  - flynshue.io/finalizer # remove this\n  labels:\n    flynshue.io/origin.namespace: fake-secret-ns\n  name: fake-secret\n  namespace: another-namespace\n  resourceVersion: \"1048\"\n  uid: 7d035a18-7f50-4713-8166-c8d4fe32833d\ntype: Opaque\n</code></pre></p>"}]}